N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
print(sigma_hat)
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=50
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
setwd("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe")
source("pv_sup.R")
source("SupWald-Functions.R")
#source("Power-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_B  WHEN H0B IS TRUE, Exogeneity ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=5000
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0.1
beta=c(0,0)
#Ar-coefficients
rho=0.4
phi=0.5
############EXOGENEITY#########
#Defining variance-covariance matrix
sig_ue=0
sig_uuq=0
sig_euq=0
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
# ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=200#c(200,400,800)
c_grid=1#c(1,5)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta=beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
quantiles=matrix(NA,ncol=6,nrow = 6)
for (j in 1:6){
i=1
quantile=rep(NA,6)
for(q in c(0.025,0.05,0.1,0.9,0.95,0.975)){
quantile[i]=quantile(Simulation[,j],q)
i=i+1
}
quantiles[,j]=quantile
}
colnames(quantiles)=c("c=1","c=1","c=1","c=5","c=5","c=5")
rownames(quantiles)=c("2.5%","5%","10%","90%","95%","97,5%")
View(quantiles)
setwd("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe")
source("pv_sup.R")
source("SupWald-Functions.R")
#install.packages("future.apply")
#install.packages("kableExtra")
library(knitr)
library(rmarkdown)
library(kableExtra)
library(future.apply)
######################## SIMULATION WT_A  WHEN H0A IS TRUE ###################################
#--------------------------------------------------------------------------------------------------------------------------------------------
N=20
# specifying parameter
alpha=c(0.01,0.01)
#under H0_B beta1=beta2 =0 , for size tests beta1=beta2=0. 1
beta=c(0.1,0.1)
#Ar-coefficients
rho=0.4
phi=0.5
#Defining variance-covariance matrix
sig_ue=-0.8
sig_uuq=0.5
sig_euq=0.6
sigma=matrix(NA,ncol=3,nrow=3)
sigma[,1]=c(1,sig_ue,sig_uuq)
sigma[,2]=c(sig_ue,1,sig_euq)
sigma[,3]=c(sig_uuq,sig_euq,1)
#--------------------------------------------------------------------------------------------------------------------------------------------
#Set to TRUE when simulating H0_B , set to FALSE for H0_A   ( When true , sum of IVX based statistic on beta=0 and W_A is returned )
IVX=FALSE
T_grid=c(200,400)
c_grid=c(1,5,10,20)
start.time=Sys.time()
Simulation=Simulate_DGP(alpha=alpha,beta = beta,rho=rho,c=c_grid,T=T_grid)
end.time=Sys.time()
runtime=end.time-start.time
runtime
warnings()
View(Simulation)
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0A_CV_SIZE_cov_struck1.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0A_CV_SIZE_cov_struck1.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0A_CV_SIZE_cov_struck2.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0A_CV_SIZE_cov_struck3.R.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_cov_struck3.R.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_cov_struck5.R.RData")
View(sigma)
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_cov_struckDGP3.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_cov_struckDGP5.RData")
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_cov_struckDGP5.RData")
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 1`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta1=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 2`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta2=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 3`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta3=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
Size_ges=rbind(size_delta1,size_delta2,size_delta3)
View(Size_ges)
load("C:/Users/peerl/OneDrive/Desktop/Studium/Master 4/Seminar/Simulation/Abgabe/data/Additional_H0B_CV_SIZE_DGP5.RData")
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 1`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta1=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 2`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta2=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
for (conf in c(0.025,0.05,0.1)){
nam=paste("size",100*conf)
assign(nam,size_calc(conf,`Simulation_delta 3`,c_grid,T_grid,k=7))
}
size=cbind(`size 2.5`,`size 5`,`size 10`)
size_delta3=cbind(size[,c(1,3,5)],size[,c(2,4,6)])
Size_ges=rbind(size_delta1,size_delta2,size_delta3)
View(Size_ges)
